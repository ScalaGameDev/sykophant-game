Console should be animated and should resize to display automagically (code like html and jquery)

Need to make the model from magicavoxel import into chunks for the TerrainWorld class - then be built and attached to rootnode





## Timeline
Make the console animate when it opens and closes
Make the console show an animated progress bar as the game is loading (gamestate node does not attach until rdy)

Voxels render well now but take a while to load in w greedy (chunks)

//see https://hub.jmonkeyengine.org/t/yave-yet-another-voxel-engine-dev-blog/30203

Add physics
Add player movement (very similar to quake- sprint and leap around)

Add acid and lava voxels that glow
Add torch(fire) voxels that glow 

Get the voxels to render small and ultra efficiently 




Add a simple editor state to add decorations to maps ?(this is hard to do in magicavoxel) 
OR- decoration is done because the voxels are way smaller..

## Main Menu

Splash Screen shows "Ultra Black Blood Death" banner which is a screenshot of a dynamically lit part of a map.. has a brushed mask around it that is gritty
There is a ultra crazy insane metal guitar riff that plays simultaneously

Then, that disappears and a ton of boot code appears that is really the boot code for the game (the logs) like a raspi.  It all types out in an animated way.
A Message appears at the bottom that states "Please enter your command:"
If a bogus command is entered, remind them in a funny random way that they can type "help" 



## Bugs
Why do the blocks seem to be rotated sideways ? (y vs z?)
On linux, the camera is broken


## Backburner
This game will be for sale but will also be open source


## Functional Programming 

"Run all your entities independently in a functionally pure way, pass in a static copy of the world (from last frame) and themselves, and they return a new version of themselves at the end"
"You create events that get communicated to the target entities"
In their simplest form: Entity => Entity

https://michaelshaw.github.io/game_talk/game.html#/34

Mutable:
Voxel grids/volumes (my games are generally tile/voxel based)
My entities (and their animation matrices)
"Tesselators" wrappers for Float arrays used for temporarily storing generated geometry.
The top two only can only be modified with through events ... so the majority of update code just seed a parent readonly type (this is how my update code remains "pure").
Not pure ... but it doesn't really feel right in either category:
Collision detection gives a pure output but uses mutation internally for temp state but it doesn't affect the entity.
Basically collision detection and animation matrix re-use stopped 90% of my allocations.
Pure:
The game update code, AI/decision making (outside of pathing/floodfilling which act as services interacted with through routed events) is just pure functions that emit events.
Intermediary representation (read: immutable tree of case classes) that gets shipped from the game logic thread to render thread. My render + sim side are in seperate projects that don't depend on each other, and part of rendering involves constructing an intermediary description that gets handed off to the render thread. This representation is immutable. It becomes garbage at the end of the frame ... this is my major abusive part of the new generation ... but I'm kind of attached to the benefits (my render layer stays pretty damn dumb, then there's the concurrency). If the garbage became too much I'd just object pool as I like the concept too much.
Happy to go in to detail on whatever you want. Or post a complete render intermediary language for a game.

http://scala-ide.org/download/current.html


Networking needs to be in scala!!!
Same with unit data
http://docs.scala-lang.org/tutorials/scala-for-java-programmers.html
https://github.com/vmarquez/PureBomberMan   add scalaz


try jme3 networking...
else use akka, netty4, kryo and freeze



Unit movement:
The client is the master of his/her position (like wow)  and the server checks it as a warden

other nice sample game
http://bazaar.launchpad.net/~willem-duminy/+junk/boogaloo/view/head:/src/boogaloo/GameState.scala


futures in scala 
http://danielwestheide.com/blog/2013/01/09/the-neophytes-guide-to-scala-part-8-welcome-to-the-future.html


DONT USE SCALAZ YET its super broken and weird
